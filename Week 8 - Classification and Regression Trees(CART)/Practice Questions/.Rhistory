result2 <- replicate(500,simulateOneRun()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun <- function () {
A <- c()
B <- c()
for (j in 1:5) {
A <- c(A,(j*InverseGenExp()))
B <- c(B,(j*InverseGenExp()))
}
return (c(A,B))
}
result2 <- replicate(500,simulateOneRun()) #Replicate the experiment
theta1 <- ifelse(S[1,] > 21.6, 1, 0)
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun <- function () {
A <- c()
B <- c()
for (j in 1:5) {
A <- c(A,(j*InverseGenExp()))
B <- c(B,(j*InverseGenExp()))
}
return (c(A,B))
}
result2 <- replicate(500,simulateOneRun()) #Replicate the experiment
theta1 <- ifelse(S[1,] > 21.6, 1, 0)
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun <- function () {
A <- c()
B <- c()
for (j in 1:5) {
A <- c(A,(j*InverseGenExp()))
B <- c(B,(j*InverseGenExp()))
}
return (c(A,B))
}
result2 <- replicate(500,simulateOneRun()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
# std.err of the estimate
std.err <- sqrt(var(theta)/500)
message("std error when antithetic pairs are used:")
print(std.err)
# confidence interval
ci.av <- t.test(theta,conf.level=0.95)$conf.int
message("CI using antithetic pairs:")
print(ci.av)
message("Variance reduction is:")
print(1-(std.err)^2/std^2)
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun <- function () {
A <- c()
for (j in 1:5) {
A <- c(A,(j*InverseGenExp()))
}
return (A)
}
result2 <- replicate(500,simulateOneRun()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
# std.err of the estimate
std.err <- sqrt(var(theta)/500)
message("std error when antithetic pairs are used:")
print(std.err)
# confidence interval
ci.av <- t.test(theta,conf.level=0.95)$conf.int
message("CI using antithetic pairs:")
print(ci.av)
message("Variance reduction is:")
print(1-(std.err)^2/std^2)
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (A)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
# std.err of the estimate
std.err <- sqrt(var(theta)/500)
message("std error when antithetic pairs are used:")
print(std.err)
# confidence interval
ci.av <- t.test(theta,conf.level=0.95)$conf.int
message("CI using antithetic pairs:")
print(ci.av)
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (A)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
return (c(X1,X2))
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (A)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
A <- sum(A)
return (A)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
result2
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (c(sum(A)[1,],sum(A)[2,]))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (c(sum(A)[,1],sum(A)[,2]))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (c(sum(A[1,]),sum(A[2,]))
}
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (c(sum(A[1,]),sum(A[2,])))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
return (c(sum(A[,1]),sum(A[,2])))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
A <- c(A, X_t)
}
print(A)
return (c(sum(A[1,]),sum(A[2,])))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
A <- c()
for (j in 1:5) {
X_t <- j*InverseGenExp()
print(X_t)
A <- c(A, X_t)
}
print(A)
return (c(sum(A[1,]),sum(A[2,])))
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
X1 <- InverseGenExp()
X2 <- 2*InverseGenExp()
X3 <- 3*InverseGenExp()
X4 <- 4*InverseGenExp()
X5 <- 5*InverseGenExp()
S <- X1 + X2 + X3 + X4 + x5
return (S)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
X1 <- InverseGenExp()
X2 <- 2*InverseGenExp()
X3 <- 3*InverseGenExp()
X4 <- 4*InverseGenExp()
X5 <- 5*InverseGenExp()
S <- X1 + X2 + X3 + X4 + X5
return (S)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
result2
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
# std.err of the estimate
std.err <- sqrt(var(theta)/500)
message("std error when antithetic pairs are used:")
print(std.err)
# confidence interval
ci.av <- t.test(theta,conf.level=0.95)$conf.int
message("CI using antithetic pairs:")
print(ci.av)
message("Variance reduction is:")
print(1-(std.err)^2/std^2)
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.015 - Simulation Modelling and Analysis/Activity/Activity 6")
#Simulate one run of random variable s
simulateOneRun <- function () {
s <- c()
for (j in 1:5) {
s <- c(s,(j*rexp(1)))
}
return (sum(s))
}
result <- replicate(1000,simulateOneRun())
result.trunc <- result > 21.6
var.a <- var(result.trunc)
ci.diff <- t.test(result.trunc, conf.level=0.95)$conf.int
std <- t.test(result.trunc, conf.level=0.95)$std
#Simulate one run of random variable s
simulateOneRun2 <- function () {
s <- c()
for (j in 1:5) {
s <- c(s,(j*rexp(1)))
}
sum.s <- sum(s)
return (sum.s)
}
result2 <- replicate(1000,simulateOneRun2()) #Replicate the experiment
Y <- result2 #Our Y value
X <- result2 > 21.6
C.xy <- cov(X,Y) #Determining  covariance between X & Y
var.y <- var(Y) #Calculating the variance of Y
a <- C.xy/var.y #Calculating the optimal a value
cv.est <- X - a*(Y-15)
message("Variance of usual estimator is:")
print(var(X))
message("Variance of control variate based estimate is:")
print(var(cv.est))
message("Variance reduction is:")
print((var(X)-var(cv.est))/var(X))*100
InverseGenExp <- function() {
U <- runif(1)
X1 <- log(1-U)/(-1)
X2 <- log(U)/(-1)
return (c(X1,X2))
}
simulateOneRun3 <- function () {
X1 <- InverseGenExp()
X2 <- 2*InverseGenExp()
X3 <- 3*InverseGenExp()
X4 <- 4*InverseGenExp()
X5 <- 5*InverseGenExp()
S <- X1 + X2 + X3 + X4 + X5
return (S)
}
result2 <- replicate(500,simulateOneRun3()) #Replicate the experiment
theta1 <- ifelse(result2[1,] > 21.6, 1, 0)
theta2 <- ifelse(result2[2,] > 21.6, 1, 0)
theta <- (theta1 + theta2)/2
# variance of the estimate
var.c <- var(theta)
message("Variance error when antithetic pairs are used:")
print(var.c)
# confidence interval
ci.av <- t.test(theta,conf.level=0.95)$conf.int
message("CI using antithetic pairs:")
print(ci.av)
message("Variance reduction is:")
print(((var.c-var.a)/var.a)*100)
message("Variance reduction is:")
print(((var.a-var.c)/var.a)*100)
df <- read.csv("census.csv")
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8 - Classification and Regression Trees(CART)/Practice Questions")
df <- read.csv("census.csv")
library(e1071) #Naive Bayes Classifier
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8 - Classification and Regression Trees(CART)/Practice Questions")
library(caTools) #Split train test data
library(ROCR) #ROC Curve
library(rpart) #CART
library(rattle) #CART Visualisation
library(RColorBrewer) #CART Visualisation
library(rpart.plot)  #CART Visualisation
library(ipred) #Bagging for decision trees only
library(randomForest)
library(tm) #Create DTM
library(SnowballC) #Stemming words
library(wordcloud)
library(e1071) #Naive Bayes Classifier
df <- read.csv("census.csv")
model1 <- glm(over50k~.,data=train,family="binomial")
set.seed(2000)                                   # set seed for random sampling
spl <- sample.split(stevens$rev,SplitRatio=0.6) # We use 70% of the data for training
train <- subset(stevens,spl==TRUE)           # training dataset
test <- subset(stevens,spl==FALSE)           # testing dataset
model1 <- glm(over50k~.,data=train,family="binomial")
set.seed(2000)                                   # set seed for random sampling
spl <- sample.split(df$over50k,SplitRatio=0.6) # We use 70% of the data for training
train <- subset(over50k,spl==TRUE)           # training dataset
test <- subset(over50k,spl==FALSE)           # testing dataset
model1 <- glm(over50k~.,data=train,family="binomial")
set.seed(2000)                                   # set seed for random sampling
spl <- sample.split(df$over50k,SplitRatio=0.6) # We use 70% of the data for training
train <- subset(df,spl==TRUE)           # training dataset
test <- subset(df,spl==FALSE)           # testing dataset
model1 <- glm(over50k~.,data=train,family="binomial")
model1 <- glm(as.factor(over50k)~.,data=train,family="binomial")
summary(model1)
names(which(coef(summary(model1))[,4] < 0.1)) #print out all predictors significant at the 10% significance level
p1 <- predict(model1,newdata=test,type="response")
table(p1>=0.5,test$over50k)
sum(diag(table1b))/sum(table1b)
table1b <- table(p1>=0.5,test$over50k)
sum(diag(table1b))/sum(table1b)
unname(table(test_1$over50k)[base_1]/sum(nrow(test_1)))
base_1 <- names(table(train_1$over50k)[which.max(table(train_1$over50k))])
base_1 <- names(table(train$over50k)[which.max(table(train$over50k))])
base_1
unname(table(test_1$over50k)[base_1]/sum(nrow(test_1)))
unname(table(p1$over50k)[base_1]/sum(nrow(p1)))
unname(table(test$over50k)[base_1]/sum(nrow(test)))
orings <- read.csv("Orings(3).csv")
str(orings)
summary(orings)
tapply(orings$Field, orings$Flight, sum) #Same as value count with index being the flight
table(tapply(orings$Field, orings$Flight, sum)) #Count the frequency count
library("ggplot2")
ggplot(orings[orings$Field>0,],aes(Temp,Field)) +  geom_point(na.rm=T) + geom_jitter(na.rm=T,width=0,height=0.1)+ylim(c(0.5,1.5)) #We use the gitter function to help seperate and see the points, we use a vertical gitter
# geom_jitter(na.rm=T,width=2,height=0)+ylim(c(0.5,1.5)) #We use a horizontal gitter here
model1 <- lm(Field~Temp+Pres,data=orings)
summary(model1)
model2 <- lm(Field~Temp,data=orings)
summary(model2)
ggplot(orings,aes(Temp,Field)) + geom_jitter(na.rm=T,height=0,width=2) + geom_smooth(method="lm",se=F,na.rm=T,fullrange=T)
model3 <- glm(Field~Temp+Pres,data=orings, family="binomial")
summary(model3)
model4 <- glm(Field~Temp,data=orings,family=binomial)
summary(model4)
model3$coefficients
model3$aic
model4$coefficients
model4$aic
predict(model4, newdata=orings[144,]) # predicts on log(odds) scale
predict(model4,newdata=orings[144,], type="response")
ggplot(orings,aes(Temp,Field)) + geom_jitter(na.rm=T,height=0,width=2) + geom_smooth(method="glm",se=F,na.rm=T,fullrange=T,method.args = list(family = "binomial"))
Pred <- predict(model4,newdata=orings,type="response")
table(Pred[1:138]>0.5,orings$Field[1:138])
table(Pred[1:138]>0.25,orings$Field[1:138])
table(Pred[1:138]>0.2,orings$Field[1:138])
#install.packages("ROCR")
library(ROCR)
ROCRpred <- prediction(Pred[1:138],orings$Field[1:138])
?performance
ROCRperf <- performance(ROCRpred,x.measure="fpr",measure="tpr")
plot(ROCRperf)
plot(ROCRperf, colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1), text.adj=c(-0.2,1.7))
performance(ROCRpred,measure="auc")@y.values
base_1 <- names(table(train$over50k)[which.max(table(train$over50k))])
table(train$over50k)
which.max(table(train$over50k))
max(table(train$over50k))
table(train$over50k)[which.max(table(train$over50k))]
names(table(train$over50k)[which.max(table(train$over50k))])
test$over50k
table(test$over50k)
table(test$over50k)[base_1]
nrow(test)
sum(nrow(test))
base_1
# QS 1
df <- read.csv("census.csv")
df[1:1,]
df[,1:1]
df[,1]
df1 <- read.csv("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8 - Classification and Regression Trees(CART)/Practice Questions/supreme(7).csv")
supreme <- read.csv("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8 - Classification and Regression Trees(CART)/Practice Questions/supreme(7).csv")
supreme$unCons <- as.integer(rowSums(supreme[,5:13]) == 9)
supreme$unLib <- as.integer(rowSums(supreme[,5:13]) == 0)
library(rpart)
library(rpart.plot)
tree_3_d <- rpart((as.factor(unCons)~petit + respon +
circuit + unconst + lctdir + issue),
data = supreme)
prp(tree_3_d)
