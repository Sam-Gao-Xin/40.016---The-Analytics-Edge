while (U > p.k){
k <- k + 1
p.k <- ((n-k)/(k+1))*(p/(1-p))*p.k
}
vec <- c(vec, k)
iterations <- iterations + 1
}
table(vec)
U2 <- runif(1000, 0, 1)
L <- ifelse(U2<0, (1/(1-U2))^(1/3), 0)
hist(L, breaks=50, freq=FALSE)
hist(L, freq=FALSE)
U2 <- runif(1000, 0, 1)
L <- ifelse(U2<0, (1/(1-U2))^(1/3), 0)
hist(L, freq=FALSE)
curve(ifelse(x<1, x, 2-x), 0.1, col="red",add=T)
U2 <- runif(1000, 0, 1)
L <- ifelse(U2>0 && U2<1, (1/(1-U2))^(1/3), 0)
hist(L, freq=FALSE)
runif(1, 0, 1)
runif(1, 0, 1)
L
U2 <- runif(1000, 0, 1)
L <- ifelse(U2>0 && U2<1, (1/(1-U2))^(1/3), 0)
L
U2 <- runif(1000, 0, 1)
L <- ifelse(U2>0 && U2<1, (1/(1-U2))^(1/3), 0)
L
L <- ifelse(U2<1, (1/(1-U2))^(1/3), 0)
L
hist(L)
hist(L, breaks=50)
U2 <- runif(1000, 0, 1)
L <- ifelse(U2<1, (1/(1-U2))^(1/3), 0)
hist(L, breaks=50)
hist(L, breaks=100)
rm(list = ls())
L <- 1/(1-U2))^(1/3)
hist(L, breaks=100)
U2 <- runif(1000, 0, 1)
L <- 1/(1-U2))^(1/3)
hist(L, breaks=100)
U2 <- runif(1000, 0, 1)
L <- 1/(1-U2))^(1/3)
hist(L, breaks=100)
L <- 1/(1-U2))^(1/3)
L <- 1/(1-U2)^(1/3)
hist(L, breaks=100)
pbinom(0, size=30, prob=0.6)
qbinom(0, size=30, prob=0.6)
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(k, size=30, prob=0.6)
while (U > p.k){
k <- k + 1
p.k <- ((n-k)/(k+1))*(p/(1-p))*p.k
}
n <- 30
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(k, size=30, prob=0.6)
while (U > p.k){
k <- k + 1
p.k <- ((n-k)/(k+1))*(p/(1-p))*p.k
}
n <- 30
p <- 0.6
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(k, size=30, prob=0.6)
while (U > p.k){
k <- k + 1
p.k <- ((n-k)/(k+1))*(p/(1-p))*p.k
}
n = 1000
p = 0.6
vec <- vector()
iterations <- 0
while (iterations <= n){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > p.k){
k <- k + 1
p.k <- p.k + ((n-k)/(k+1))*(p/(1-p))*p.k
}
vec <- c(vec, k)
iterations <- iterations + 1
}
table(vec)
n = 1000
p = 0.6
vec <- vector()
iterations <- 0
while (iterations <= n){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > p.k){
k <- k + 1
p.k <- p.k + ((n-k)/(k+1))*(p/(1-p))*p.k
print(p.k)
}
vec <- c(vec, k)
iterations <- iterations + 1
}
table(vec)
binom.cdf = rep(0,30)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = rep(0,30)
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 1:30) {
binom.pdf[i] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i]
}
print(binom.pdf)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 1:30) {
binom.pdf[i] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i]
}
print(binom.pdf)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = vector(pbinom(0, size=30, prob=0.6))
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
binom.pdf
n = 1000
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 2:30) {
binom.pdf[i] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i]
}
print(binom.pdf)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 2:30) {
binom.pdf[i] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i]
}
print(cumsum(binom.pdf))
pbinom(2,n,p)
pbinom(10,n,p)
qbinom(10,n,p)
rbinom(10,n,p)
pbinom(10,n,p)
pbinom(30,n,p)
pbinom(30,30,0.6)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 2:30) {
binom.pdf[i] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 1000
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 1:30) {
binom.pdf[i+1] <- ((n-i)/(i+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (i in 1:30) {
binom.pdf[i+1] <- ((n-i)/(i+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[i+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (k in 1:29) {
binom.pdf[i+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
binom.pdf = c(pbinom(0, size=30, prob=0.6),rep(0,30))
lastVal <- pbinom(0, size=30, prob=0.6)
for (k in 1:29) {
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- pbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- pbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
print(lastVal)
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- pbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
# print(lastVal)
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- pbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
print(lastVal)
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
print(lastVal)
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
print(((n-k)/(k+1))*(p/(1-p))*lastVal)
lastVal <- binom.pdf[k+1]
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
print(dbinom(k,30,0.6))
dbinom(0,30,0.6)
dbinom(1,30,0.6)
dbinom(0,30,0.6) * ((30-1)/(1+1))*(0.6/(1-0.6))
dbinom(0,30,0.6) * ((30-2)/(1+2))*(0.6/(1-0.6))
dbinom(0,30,0.6) * ((30-0)/(1+0))*(0.6/(1-0.6))
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 1:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k-1)/(k+1-1))*(p/(1-p))*lastVal
print(((n-k)/(k+1))*(p/(1-p))*lastVal)
lastVal <- binom.pdf[k+1]
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k-1)/(k+1))*(p/(1-p))*lastVal
print(((n-k)/(k+1))*(p/(1-p))*lastVal)
lastVal <- binom.pdf[k+1]
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k-1)/(k+1))*(p/(1-p))*lastVal
print(binom.pdf[k+1])
lastVal <- binom.pdf[k+1]
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
print(binom.pdf[k+1])
lastVal <- binom.pdf[k+1]
}
print(sum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
# print(binom.pdf[k+1])
lastVal <- binom.pdf[k+1]
}
print(cumsum(binom.pdf))
pbinom(5,30,0.6)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
binom.cdf = cumsum(binom.pdf)
iterations <- 0
while (iterations <= n){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > binom.cdf[k+1]){
k <- k + 1
}
vec <- c(vec, k)
iterations <- iterations + 1
}
table(vec)
iterations <- 0
while (iterations <= n){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > binom.cdf[k+1]){
k <- k + 1
}
vec <- c(vec, k)
iterations <- iterations + 1
}
hist(vec)
iterations <- 0
while (iterations <= 1000){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > binom.cdf[k+1]){
k <- k + 1
}
vec <- c(vec, k)
iterations <- iterations + 1
}
hist(vec)
iterations <- 0
while (iterations <= 1000){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > binom.cdf[k+1]){
k <- k + 1
}
vec <- c(vec, k)
iterations <- iterations + 1
}
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
print(dbinom(k,30,0.6))
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
binom.cdf = cumsum(binom.pdf)
n = 30
p = 0.6
vec <- vector()
lastVal <- dbinom(0, size=30, prob=0.6)
binom.pdf = c(lastVal,rep(0,30))
for (k in 0:29) {
binom.pdf[k+1] <- ((n-k)/(k+1))*(p/(1-p))*lastVal
lastVal <- binom.pdf[k+1]
}
binom.cdf = cumsum(binom.pdf)
iterations <- 0
while (iterations <= 1000){
k <- 0
U <- runif(1,0,1)
p.k <- pbinom(0, size=30, prob=0.6)
while (U > binom.cdf[k+1]){
k <- k + 1
}
vec <- c(vec, k)
iterations <- iterations + 1
}
hist(vec)
U2 <- runif(10000, 0, 1)
L <- 1/(1-U2)^(1/3)
hist(L, breaks=100)
U2 <- runif(1000000, 0, 1)
L <- 1/(1-U2)^(1/3)
hist(L, breaks=100)
U2 <- runif(100, 0, 1)
L <- 1/(1-U2)^(1/3)
hist(L, breaks=100)
U2 <- runif(1000, 0, 1)
L <- 1/(1-U2)^(1/3)
hist(L, breaks=100)
library(keras)
library(tidyverse)
library(caret)
#1. Data Ingestion
rm(list=ls())
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 13 - Kaggle Comp")
df <- read.csv("cleaned_train_df.csv", stringsAsFactors=FALSE)
length <- 0.4*nrow(df)
df <- df[sample(1:nrow(df), length,replace=FALSE),]
#test.df <- read.csv("../input/taetestdata/cleaned_test_df.csv", stringsAsFactors=FALSE)
#1a. Data Splitting
index <- createDataPartition(df$sentiment, p=0.7, list=FALSE)
final.training <- df[index,]
final.test <- df[-index,]
#2. Data Preprocessing
X_train <- final.training %>% select(-sentiment)
y_train <- final.training %>% select(sentiment)
X_test <- final.test %>% select(-sentiment)
y_test <- final.test %>% select(sentiment)
#3. Model Training
model <- keras_model_sequential()
model %>%
layer_dense(units=64, activation="relu", input_shape=ncol(X_train)) %>%
layer_dropout(rate=0.8)%>%
#     layer_dense(units=64, activation="relu") %>%
#     layer_dropout(rate=0.3) %>%
layer_dense(units = 3, activation="softmax")
history <- model %>% compile(
loss="sparse_categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy")
)
model %>% fit(
X_train, y_train,
epochs=100,
batch_size=5,
validation_split=0.3
)
summary(model)
#4. Model Evaluation
model %>% evaluate(X_test, y_test)
# plot(history$metrics$loss, main="Model Loss", xlab="epoch",ylab="loss", col="orange",type="l")
# lines(history$metrics$val_loss, col="skyblue")
# legend("topright", c("Training","Testing"), col=c("orange","skyblue"), lty=c(1,1))
# plot(history$metrics$acc, main="Model Accuracy", xlab="epoch",ylab="accuracy", col="orange",type="l")
# lines(history$metrics$val_acc, col="skyblue")
# legend("topright", c("Training","Testing"), col=c("orange","skyblue"), lty=c(1,1))
#predictions <- model %>% predict_classes(X_test)
