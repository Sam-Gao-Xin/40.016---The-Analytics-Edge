# This forces hp to be the reference level and the other alternative specific constants are relative to this
predQ1_3<- predict(modelQ1_3, newdata=dataheat)
shareQ1_3<- apply(predQ1_3,2,mean)
shareQ1_3
unname(modelQ1_3$coefficients["oc"]/modelQ1_3$coefficients["ic"])
summary(modelQ1_3)
### Check that you are right.
modelQ1_4 <- mlogit(depvar ~ ic + oc, data = dataheat, reflevel = "gr")
summary(modelQ1_4)
dataheat$iic <- dataheat$ic/dataheat$income
modelQ1_5 <- mlogit(depvar ~ oc + iic, dataheat)
summary(modelQ1_5)
modelQ1_6 <- mlogit(depvar ~ oc + ic | income, dataheat)
summary(modelQ1_6)
heating1 <- heating
heating1$ic.hp <- 0.9*heating1$ic.hp
dataheat1 <- mlogit.data(heating1, choice = "depvar", shape = "wide", varying = c(3:12))
predQ1_3a <- predict(modelQ1_3, newdata = dataheat1)
shareQ1_3a <- apply(predQ1_3a, 2, mean)
shareQ1_3a
df<- subset(heating, select = c(3:12))
# New columns
df$ic.eci <- df$ic.ec + 200
df$oc.eci <- df$oc.ec * 0.75
df$hpexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.hp+modelQ1_3$coefficients["ic"]*df$ic.hp)
df$ecexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.ec+modelQ1_3$coefficients["ic"]*df$ic.ec+modelQ1_3$coefficients["(Intercept):ec"])
df$erexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.er+modelQ1_3$coefficients["ic"]*df$ic.er+modelQ1_3$coefficients["(Intercept):er"])
df$gcexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.gc+modelQ1_3$coefficients["ic"]*df$ic.gc+modelQ1_3$coefficients["(Intercept):gc"])
df$grexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.gr+modelQ1_3$coefficients["ic"]*df$ic.gr+modelQ1_3$coefficients["(Intercept):gr"])
df$eciexp<-exp(modelQ1_3$coefficients["oc"]*df$oc.eci+modelQ1_3$coefficients["ic"]*df$ic.eci+modelQ1_3$coefficients["(Intercept):ec"])
df$sumexp <-apply(subset(df,select=c(13:17)),1,sum)
df$sumexpnew <-apply(subset(df,select=c(13:18)),1,sum)
df$hp <-df$hpexp/df$sumexp
df$ec <-df$ecexp/df$sumexp
df$er <-df$erexp/df$sumexp
df$gc <-df$gcexp/df$sumexp
df$gr <-df$grexp/df$sumexp
df$hpnew <-df$hpexp/df$sumexpnew
df$ecnew <-df$ecexp/df$sumexpnew
df$ernew <-df$erexp/df$sumexpnew
df$gcnew <-df$gcexp/df$sumexpnew
df$grnew <-df$grexp/df$sumexpnew
df$ecinew <-df$eciexp/df$sumexpnew
oldprob<-subset(df,select=c(21:25))
newprob<-subset(df,select=c(26:31))
marketshareold<-apply(oldprob,2,mean)
marketsharenew<-apply(newprob,2,mean)
marketshareold
marketsharenew
df$sumexp
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
setwd("~/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
df_1_a <- read.csv("Heating(7).csv")
# head(df_1_a)
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
suppressMessages(library(mlogit))  # suppress dependency loads
df_1_a <- read.csv("Heating(7).csv")
summary(df_1_a)
str(df_1_a)
return(choices)
get_choices <- function(input_dataframe, choice_colname) {
if (is(input_dataframe[,choice_colname], "factor")) {
choices <- levels(input_dataframe[,choice_colname])
} else {
choices <- unique(input_dataframe[,choice_colname])
}
return(choices)
}
get_all_pred_cols <- function(input_dataframe, choices) {
pred_cols <- c()
for (colname in colnames(input_dataframe)) {
if (any(endsWith(colname, as.character(choices)))) {
pred_cols <- c(pred_cols, colname)
}
}
return(pred_cols)
}
get_choices <- function(input_dataframe, choice_colname) {
if (is(input_dataframe[,choice_colname], "factor")) {
choices <- levels(input_dataframe[,choice_colname])
} else {
choices <- unique(input_dataframe[,choice_colname])
}
return(choices)
}
get_all_pred_cols <- function(input_dataframe, choices) {
pred_cols <- c()
for (colname in colnames(input_dataframe)) {
if (any(endsWith(colname, as.character(choices)))) {
pred_cols <- c(pred_cols, colname)
}
}
return(pred_cols)
}
get_pred_vars <- function(input_pred_cols, choices) {
single_choice_pred <- input_pred_cols[seq(1,
length(input_pred_cols),
length(choices))]
for (choice in choices) {
if (all(endsWith(single_choice_pred, as.character(choice)))) {
pred_vars_choice_rem <- gsub(paste0(".{", nchar(choice), "}$"), '',
single_choice_pred)
if (any(endsWith(pred_vars_choice_rem, "."))) {
return(gsub(".{1}$", '', pred_vars_choice_rem))
} else {
return(pred_vars_choice_rem)
}
}
}
}
setdiff(ls(), ls(pattern = "SETUP"))
rm(list = setdiff(ls(), ls(pattern = "SETUP")))
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
suppressMessages(library(mlogit))  # suppress dependency loads
df_1_a <- read.csv("Heating(7).csv")
str(df_1_a)
get_choices <- function(input_dataframe, choice_colname) {
if (is(input_dataframe[,choice_colname], "factor")) {
choices <- levels(input_dataframe[,choice_colname])
} else {
choices <- unique(input_dataframe[,choice_colname])
}
return(choices)
}
get_all_pred_cols <- function(input_dataframe, choices) {
pred_cols <- c()
for (colname in colnames(input_dataframe)) {
if (any(endsWith(colname, as.character(choices)))) {
pred_cols <- c(pred_cols, colname)
}
}
return(pred_cols)
}
get_pred_vars <- function(input_pred_cols, choices) {
single_choice_pred <- input_pred_cols[seq(1,
length(input_pred_cols),
length(choices))]
for (choice in choices) {
if (all(endsWith(single_choice_pred, as.character(choice)))) {
pred_vars_choice_rem <- gsub(paste0(".{", nchar(choice), "}$"), '',
single_choice_pred)
if (any(endsWith(pred_vars_choice_rem, "."))) {
return(gsub(".{1}$", '', pred_vars_choice_rem))
} else {
return(pred_vars_choice_rem)
}
}
}
}
# note that we get different column order from dataset
# c("ec", "er", ...) vs c("gc", "gr", ...)
choices_1_a <- get_choices(df_1_a, "depvar")
pred_cols_1 <- get_all_pred_cols(df_1_a, choices_1_a)
vary_ind_1 <- which(names(df_1_a) %in% pred_cols_1)
pred_vars_1 <- get_pred_vars(pred_cols_1, choices_1_a)
# running mlogit.data on what we have to transform it
data_1_a <- mlogit.data(df_1_a,  # data.frame of data
choice = "depvar",  # column name of choice
shape = "wide",  # wide means each row is an observation
# long if each row is an alternative
varying = vary_ind_1,
# indices of varying columns for each alternative,
sep = "."  # not necessary but still good to be clear
)
setdiff(ls(), ls(pattern = "SETUP"))
rm(list = setdiff(ls(), ls(pattern = "SETUP")))
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
suppressMessages(library(mlogit))  # suppress dependency loads
df_1_a <- read.csv("Heating(7).csv")
str(df_1_a)
# head(df_1_a)
get_choices <- function(input_dataframe, choice_colname) {
if (is(input_dataframe[,choice_colname], "factor")) {
choices <- levels(input_dataframe[,choice_colname])
} else {
choices <- unique(input_dataframe[,choice_colname])
}
return(choices)
}
get_all_pred_cols <- function(input_dataframe, choices) {
pred_cols <- c()
for (colname in colnames(input_dataframe)) {
if (any(endsWith(colname, as.character(choices)))) {
pred_cols <- c(pred_cols, colname)
}
}
return(pred_cols)
}
get_pred_vars <- function(input_pred_cols, choices) {
single_choice_pred <- input_pred_cols[seq(1,
length(input_pred_cols),
length(choices))]
for (choice in choices) {
if (all(endsWith(single_choice_pred, as.character(choice)))) {
pred_vars_choice_rem <- gsub(paste0(".{", nchar(choice), "}$"), '',
single_choice_pred)
if (any(endsWith(pred_vars_choice_rem, "."))) {
return(gsub(".{1}$", '', pred_vars_choice_rem))
} else {
return(pred_vars_choice_rem)
}
}
}
}
# note that we get different column order from dataset
# c("ec", "er", ...) vs c("gc", "gr", ...)
choices_1_a <- get_choices(df_1_a, "depvar")
pred_cols_1 <- get_all_pred_cols(df_1_a, choices_1_a)
vary_ind_1 <- which(names(df_1_a) %in% pred_cols_1)
pred_vars_1 <- get_pred_vars(pred_cols_1, choices_1_a)
# running mlogit.data on what we have to transform it
data_1_a <- mlogit.data(df_1_a,  # data.frame of data
choice = "depvar",  # column name of choice
shape = "wide",  # wide means each row is an observation
# long if each row is an alternative
varying = vary_ind_1,
# indices of varying columns for each alternative,
sep = "."  # not necessary but still good to be clear
)
model_1_a <- mlogit(depvar ~ ic + oc - 1, data_1_a)  # -1 means no intercept
# summary(model_1_a)
coef(model_1_a)
coef_table_1 <- summary(model_1_a)$CoefTable  # for later
# note the naming difference from glm
coef_table_1[,4]
2*pnorm(-abs(coef_table_1[,3]))
# note the assumption of two-sided test
pred_1_a <- predict(model_1_a, newdata = data_1_a)
table(df_1_a$depvar)/nrow(df_1_a)
apply(pred_1_a, 2, mean)  # 2 refers to doing the function over columns
unname(coef(model_1_a)["oc"]/coef(model_1_a)["ic"])
WTP_1_A_IV <- coef(model_1_a)["oc"]/coef(model_1_a)["ic"]
data_1_a$lcc <- data_1_a$ic + data_1_a$oc/0.12
model_1_b <- mlogit(depvar ~ lcc - 1, data_1_a)
logLik(model_1_b)
logLik(model_1_a)
library(lmtest)
lrtest(model_1_a, model_1_b)
df_2 <- read.csv("Electricity(7).csv")
str(df_2)
choices_2 <- get_choices(df_2, "choice")
pred_cols_2 <- get_all_pred_cols(df_2, choices_2)
vary_ind_2 <- which(names(df_2) %in% pred_cols_2)
pred_vars_2 <- get_pred_vars(pred_cols_2, choices_2)
rpar_vec_2_a <- rep("n", length(pred_vars_2))  # all gaussian
names(rpar_vec_2_a) <- pred_vars_2
setdiff(ls(), ls(pattern = "SETUP"))
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
suppressMessages(library(mlogit))  # suppress dependency loads
setdiff(ls(), ls(pattern = "SETUP"))
rm(list = setdiff(ls(), ls(pattern = "SETUP")))
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 5")
suppressMessages(library(mlogit))  # suppress dependency loads
df_2 <- read.csv("Electricity(7).csv")
str(df_2)
choices_2 <- get_choices(df_2, "choice")
str(df_2)
choices_2 <- get_choices(df_2, "choice")
df_2 <- read.csv("Electricity(7).csv")
str(df_2)
choices_2 <- get_choices(df_2, "choice")
library(lmtest)
choices_2 <- get_choices(df_2, "choice")
return(choices)
get_choices <- function(input_dataframe, choice_colname) {
if (is(input_dataframe[,choice_colname], "factor")) {
choices <- levels(input_dataframe[,choice_colname])
} else {
choices <- unique(input_dataframe[,choice_colname])
}
return(choices)
}
get_all_pred_cols <- function(input_dataframe, choices) {
pred_cols <- c()
for (colname in colnames(input_dataframe)) {
if (any(endsWith(colname, as.character(choices)))) {
pred_cols <- c(pred_cols, colname)
}
}
return(pred_cols)
}
get_pred_vars <- function(input_pred_cols, choices) {
single_choice_pred <- input_pred_cols[seq(1,
length(input_pred_cols),
length(choices))]
for (choice in choices) {
if (all(endsWith(single_choice_pred, as.character(choice)))) {
pred_vars_choice_rem <- gsub(paste0(".{", nchar(choice), "}$"), '',
single_choice_pred)
if (any(endsWith(pred_vars_choice_rem, "."))) {
return(gsub(".{1}$", '', pred_vars_choice_rem))
} else {
return(pred_vars_choice_rem)
}
}
}
}
choices_2 <- get_choices(df_2, "choice")
pred_cols_2 <- get_all_pred_cols(df_2, choices_2)
vary_ind_2 <- which(names(df_2) %in% pred_cols_2)
pred_vars_2 <- get_pred_vars(pred_cols_2, choices_2)
rpar_vec_2_a <- rep("n", length(pred_vars_2))  # all gaussian
names(rpar_vec_2_a) <- pred_vars_2
data_2 <- mlogit.data(df_2, id.var = "id", choice = "choice",
varying = vary_ind_2, shape = "wide", sep = "")
CHECK_IF_MIXED_LOGIT_OBJ_EXISTS <- function(mixed_logit_file_name, rpar) {
if (!file.exists(mixed_logit_file_name)) {
mixed_logit_obj <- mlogit(as.formula(paste0("choice ~ ", paste0(pred_vars_2, collapse = " + "), " - 1")),
data = data_2, rpar = rpar, panel = TRUE)
saveRDS(mixed_logit_obj, file = mixed_logit_file_name)
return(mixed_logit_obj)
} else {
return(readRDS(mixed_logit_file_name))
}
}
MIXED_LOGIT_FILE_NAME_2_A <- "2_a_mixed_logit.rds"
model_2_a <- CHECK_IF_MIXED_LOGIT_OBJ_EXISTS(MIXED_LOGIT_FILE_NAME_2_A, rpar_vec_2_a)
vary_ind_2
rpar_vec_2_a
vary_ind_2
rpar_vec_2_a
data_2 <- mlogit.data(df_2, id.var = "id", choice = "choice",
varying = vary_ind_2, shape = "wide", sep = "")
model_2_a <- mlogit(as.formula(paste0("choice ~ ",
paste0(pred_vars_2,
collapse = " + "),  # use all
" - 1")),  # no intercept
data = data_2, rpar = rpar_vec_2_a, panel = TRUE)
model_2_a <- mlogit(as.formula(paste0("choice ~ ",
paste0(pred_vars_2,
collapse = " + "),  # use all
" - 1")),  # no intercept
data = data_2, rpar = rpar_vec_2_a, panel = TRUE)
summary(model_2_a)
model_2_a$coefficients["cl"]
model_2_a$coefficients["cl"]
and the mean coefficient of the price coefficient,
```{r 2_a_i2}
model_2_a$coefficients["pf"]
```
model_2_a$coefficients["pf"]
x <- model_2_a$coefficients
str(df_2)
model_2_a$coefficients[c("cl", "sd.cl")]
pnorm(0, model_2_a$coefficients["cl"], model_2_a$coefficients["sd.cl"])
pnorm(1, model_2_a$coefficients["cl"], model_2_a$coefficients["sd.cl"])
pnorm(0, model_2_a$coefficients["cl"], model_2_a$coefficients["sd.cl"])
MIXED_LOGIT_FILE_NAME_2_B <- "2_b_mixed_logit.rds"
rpar_vec_2_b <- rpar_vec_2_a[names(rpar_vec_2_a) != "pf"]
model_2_b <- CHECK_IF_MIXED_LOGIT_OBJ_EXISTS(MIXED_LOGIT_FILE_NAME_2_B, rpar_vec_2_b)
pnorm(-model_2_a$coef["pf"]/model_2_a$coef["sd.pf"])
### NOT RUN
rpar_vec_2_b <- rpar_vec_2_a[names(rpar_vec_2_a) != "pf"]
model_2_b <- mlogit(as.formula(paste0("choice ~ ",
paste0(pred_vars_2,
collapse = " + "),  # use all
" - 1")),  # no intercept
data = data_2, rpar = rpar_vec_2_b, panel = TRUE)
### NOT RUN
rpar_vec_2_b <- rpar_vec_2_a[names(rpar_vec_2_a) != "pf"]
model_2_b <- mlogit(as.formula(paste0("choice ~ ",
paste0(pred_vars_2,
collapse = " + "),  # use all
" - 1")),  # no intercept
data = data_2, rpar = rpar_vec_2_b, panel = TRUE)
model_2_b <- mlogit(as.formula(paste0("choice ~ ",
paste0(pred_vars_2,
collapse = " + "),  # use all
" - 1")),  # no intercept
data = data_2, rpar = rpar_vec_2_b, panel = TRUE)
# summary(model_2_
summary(model_2_b)
rpar_vec_2_a
model_2_b$coefficients["pf"]
model_2_a$logLik
model_2_b$logLik
MIXED_LOGIT_FILE_NAME_2_C <- "2_c_mixed_logit.rds"
rpar_vec_2_c <- rpar_vec_2_b
rpar_vec_2_c["wk"] <- "u"
model_2_c <- CHECK_IF_MIXED_LOGIT_OBJ_EXISTS(MIXED_LOGIT_FILE_NAME_2_C, rpar_vec_2_c)
summary(model_2_c)
model_2_c$coefficients["pf"]
summary(model_2_c)$summary.rpar["wk", c("Min.", "Max.")]
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 5/Lecture 9 - Model Assesment and Model Selection")
rm(list=ls())
hitter <- read.csv("Hitters(9).csv")
str(hitter)
hitters<-na.omit(hitter)
str(hitters)
library(leaps)
?regsubsets
hitters <- hitter[,2:21]
model1 <- regsubsets(Salary~.,hitters)
summary(model1)
model2 <- regsubsets(Salary~., hitters, nvmax=19) #Changing the max number of features in the model, and value for 19 for all the feature variables, as the default value of nvmax is 8
summary(model2)
plot(model2)
```{r}
names(summary(model2))
summary(model2)$rsq
plot(summary(model2)$rsq)
plot(summary(model2)$rss)
plot(summary(model2)$adjr2)
which.max(summary(model2)$adjr2)
coef(model2,11)
names(summary(model2))
summary(model2)$rsq
plot(summary(model2)$rsq)
plot(summary(model2)$rsq)
plot(summary(model2)$rsq)
plot(summary(model2)$rss)
plot(summary(model2)$adjr2)
which.max(summary(model2)$adjr2)
coef(model2,11)
which.max(summary(model2)$adjr2)
model3<-regsubsets(Salary~.,data=hitters,nvmax=19,method="forward")
which.max(summary(model3)$adjr2)
coef(model3,11)
summary(model2)$adjr2-summary(model3)$adjr2
plot(summary(model3)$adjr2)
model3<-regsubsets(Salary~.,data=hitters,nvmax=19,method="forward")
summary(model3)
model3<-regsubsets(Salary~.,data=hitters,nvmax=19,method="forward")
which.max(summary(model3)$adjr2)
coef(model3,11)
summary(model2)$adjr2-summary(model3)$adjr2
plot(summary(model3)$adjr2)
summary(model3)
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 5/Lecture 10 - Model Selection(Cross Validation and LASSO)")
rm(list=ls())
hitter <- read.csv("Hitters(10).csv")
str(hitter)
hitter<-na.omit(hitter)
str(hitter)
#install.packages("leaps")
library(leaps)
?regsubsets
hitters <- hitter[,2:21]
model1 <- regsubsets(Salary~.,hitters)
summary(model1)
model2<-regsubsets(Salary~.,hitters,nvmax=19)
summary(model2)
plot(model2)
names(summary(model2))
summary(model2)$rsq
plot(summary(model2)$rsq)
plot(summary(model2)$rss)
plot(summary(model2)$adjr2)
which.max(summary(model2)$adjr2)
coef(model2,11)
train
set.seed(1)
train=sample(c(TRUE ,FALSE), nrow(hitters),rep=TRUE)
train
train
valset =(!train)
valset
valset
model_valset=regsubsets(Salary~.,data=hitters[train ,],nvmax =19)
summary(model_valset)
valset.mat=model.matrix(Salary~.,data=hitters[valset,])
valset.mat
MSE.val =rep(NA ,19)
for(i in 1:19){
coefi=coef(model_valset, id=i)
pred=valset.mat[,names(coefi)]%*%coefi
MSE.val[i]= mean((hitters$Salary[valset]-pred)^2)
}
MSE.val
plot(MSE.val)
which.min(MSE.val)
coef(model_valset,10) #### Coefficients from the entire training set of hitters (without NA values)
coef(model2,10)          #### Coefficients from the entire data set of hitters (without NA values)
names(summary(model2))
set.seed(2)
?cv.glmnet
cvlasso <- cv.glmnet(X[train,],y[train])
model_valset=regsubsets(Salary~.,data=hitters[train ,],nvmax =19)
summary(model_valset)
valset.mat=model.matrix(Salary~.,data=hitters[valset,])
valset.mat
MSE.val =rep(NA ,19)
for(i in 1:19){
coefi=coef(model_valset, id=i)
pred=valset.mat[,names(coefi)]%*%coefi
MSE.val[i]= mean((hitters$Salary[valset]-pred)^2)
}
MSE.val
plot(MSE.val)
which.min(MSE.val)
coef(model_valset,10) #### Coefficients from the entire training set of hitters (without NA values)
coef(model2,10)          #### Coefficients from the entire data set of hitters (without NA values)
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars =names(coefi)
mat[,xvars]%*%coefi
}
pred<- predict.regsubsets(model_valset,hitters[valset,],id=10)
MSE.valset10<- mean((hitters$Salary[valset]-pred)^2)
MSE.valset10
MSE.val[10]
sum(train)
nrow(hitters)
263/2
k=10
set.seed (1)
folds=sample(1:k,nrow(hitters),replace =TRUE)
cv.errors =matrix(NA,k,19, dimnames=list(NULL, paste(1:19)))
folds
cv.errors
