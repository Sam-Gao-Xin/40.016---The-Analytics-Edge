week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
hist(task1_data,col = 'skyblue3', breaks = 30)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
print(stocks_to_order)
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
print(stocks_to_order)
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
print(stocks_to_order)
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
hist(task1_data,col = 'skyblue3', breaks = 30)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
print(1)
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
print(Dj)
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
replenish_cost <- 0
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
replenish_cost <- 0
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
hist(task1_data,col = 'skyblue3', breaks = 30)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
replenish_cost <- 0
if (Yj < s){
stocks_to_order <- S - Yj
print(1)
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
Xj <- Yj
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) + (Yj * -0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
hist(task1_data,col = 'skyblue3', breaks = 30)
TotalPayout <- function(n,r,s,S){
# Initialization
total_payout <- rep(0,n) # For storing n samples of the total payout
s = s #Threshold Level
S = S #Maximum amount of stock
# One independent sample iteration
for(i in 1:n){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
Xj <- Yj
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) - (Yj * 0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
total_payout[i] <- week_payout # To obtain total payout
}
return(total_payout)
}
task1_data <- TotalPayout(1000,100,80,500)
hist(task1_data,col = 'skyblue3', breaks = 30)
ExpectedProfit<-function(r,s,S,tol){
# Initialization
nrep.initial <- 100
mean.S <-  0
var.S <- 0
i <- 1
term.flag = FALSE
# For each replication, generate S_N
# Stop if #iterations > nrep.initial and error < tolerance
while(term.flag == FALSE){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
Xj <- Yj
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) - (Yj * 0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
#Compute Sample Mean and Sample Variance
mean.prev <- mean.S
var.prev <- var.S
mean.S <- mean.prev + (week_payout - mean.prev)/(i)
if (i > 1){
var.S <- (1-1/(i-1))*var.prev + i*(mean.S - mean.prev)^2
}
# Check for termination with 97.5% Confidence
se <- sqrt(var.S/i)
if (i > nrep.initial && 2.241403*se < tol){
term.flag <- TRUE
}
else{
i <- i + 1
}
}
return(c(mean.S,se,i))
}
task2_data <- ExpectedProfit(100,80,500,2)
print(paste0("Expected total profit: $", round(task2_data[1], 3)))
print(paste0("Standard error estimate: ", round(task2_data[2], 3)))
print(paste0("m: ", task2_data[3]))
ExpectedProfit<-function(r,s,S,tol){
# Initialization
nrep.initial <- 100
mean.S <-  0
var.S <- 0
i <- 1
term.flag = FALSE
# For each replication, generate S_N
# Stop if #iterations > nrep.initial and error < tolerance
while(term.flag == FALSE){
Xj <- 500
stocks_to_order <- 0
week_payout <- 0
#Loop through 1 week worth of product
for (j in 1:7){
Dj <- rpois(1,r) # To generate one sample of no. of claims in a day
stock_sold <- min(Xj, Dj) #Calculate the maximum number of products that can be sold
Yj <- max(0,(Xj-Dj)) #Stocks left at the end of the day
if (Yj < s){
stocks_to_order <- S - Yj
if (ifelse(runif(1)<0.9,1,0) == 1){
Xj <- S
replenish_cost <- 10 + (stocks_to_order*1)
}
else{
Xj <- Yj
replenish_cost <- 10
}
}
else{
replenish_cost <- 0
Xj <- Yj
}
#total_payout_day = (Profits from stocks sold) + (Cost of storage from remaining stock) + (Cost from replenish order)
total_payout_day <- (stock_sold * 2) - (Yj * 0.1) - replenish_cost
week_payout = week_payout + total_payout_day
}
#Compute Sample Mean and Sample Variance
mean.prev <- mean.S
var.prev <- var.S
mean.S <- mean.prev + (week_payout - mean.prev)/(i)
if (i > 1){
var.S <- (1-1/(i-1))*var.prev + i*(mean.S - mean.prev)^2
}
# Check for termination with 97.5% Confidence
se <- sqrt(var.S/i)
if (i > nrep.initial && 2.241403*se < tol){
term.flag <- TRUE
}
else{
i <- i + 1
}
}
return(c(mean.S,se,i))
}
task2_data <- ExpectedProfit(100,80,500,2)
print(paste0("Expected total profit: $", round(task2_data[1], 3)))
print(paste0("Standard error estimate: ", round(task2_data[2], 3)))
print(paste0("m: ", task2_data[3]))
