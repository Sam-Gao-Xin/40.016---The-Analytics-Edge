table(distances)
nrow(distances)
sum(table(distances))
distances <- dist(fifa_scale[:10000,], method="euclidean")
sum(table(distances))
distances <- dist(fifa_scale[:10000,], method="euclidean")
distances <- dist(fifa_scale[1:10000,], method="euclidean")
distances <- dist(fifa_scale[1:10000,], method="euclidean")
nrow(fifa_scale)
clusterMovies1 <- hclust(distances, method="ward.D2")
clusterGroups1 <- cutree(clusterMovies1, k=20)
count(clusterGroups1)
nrow(clusterGroups1)
clusterGroups1)
clusterGroups1
unique(clusterGroups1)
table(clusterGroups1)
clusterMovies2 <- hclust(distances, method="complete")
clusterGroups2 <- cutree(clusterMovies2, k=20)
table(clusterGroups2)
table(clusterGroups1$clusters)
table(clusterGroups1$cluster)
clusterMovies1 <- hclust(distances, method="ward.D2")
clusterGroups1 <- cutree(clusterMovies1, k=20)
plot(clusterMovies1)
plot(clusterMovies2)
clusterMovies1 <- hclust(distances, method="ward.D2")
#plot(clusterMovies1)
clusterGroups1 <- cutree(clusterMovies1, k=5)
clusterGroups1
clusterGroups1$centres
table(clusterGroups1,fifa_scale$Marketing )
table(clusterGroups1, fifa_drop$Marketing)
table(clusterGroups1)
table(clusterGroups1$marketing =)
table(clusterGroups1$marketing)
clusterGroups1
Cat1 <- matrix(0,nrow=36,ncol=10) # a matrix "Cat1" where rows denote categories and columns indicate clusters
for(i in 1:36){
Cat1[i,] <- tapply(Data[,i], clusterGroups1, mean)
}
rownames(Cat1) <- colnames(fifa_scale)[1:36]
Cat1 <- matrix(0,nrow=36,ncol=10) # a matrix "Cat1" where rows denote categories and columns indicate clusters
for(i in 1:36){
Cat1[i,] <- tapply(fifa_scale[,i], clusterGroups1, mean)
}
rownames(Cat1) <- colnames(fifa_scale)[1:36]
Cat1
Cat1[marketing,]
Cat1[Marketing,]
Cat1[]
Cat1["Marking",]
which.max(Cat1["Marking",])
mean(Cat1["Marking",])
mean(Cat1["Marking",])
mean(Cat1["StandingTackle",])
mean(Cat1["Marking",])
mean(Cat1["SlidingTackle",])
Cat1
Cat1[columns,]
columns = "Marking", "StandingTackle", "SlidingTackle"
Cat1[columns,]
columns = "Marking", "StandingTackle", "SlidingTackle"
columns = c("Marking", "StandingTackle", "SlidingTackle")
Cat1[columns,]
colMeans(Cat1[columns,])
table(Cat1["Position",])
Cat1["Position",]
Cat1["Position",]
Cat1
Cat1["Positioning",]
Cat1["Positioning",]
Cat1["Positioning",][3]
fifa_drop[Cat1["Positioning",][3]]
fifa_drop[Cat1["Positioning",][3]]["Positioning"]
fifa_drop[Cat1[,3]["Positioning"]
fifa_drop[Cat1[,3]["Positioning"]
fifa_drop[Cat1[,3]]["Positioning"]
fifa_drop[Cat1[,3]]
Cat1[,3]
table(Cat1[,3])
clusterMovies2 <- kmeans(fifa_scale,centers=5)
table(clusterMovies2$clusters)
table(clusterMovies2$cluster)
table(clusterMovies3$cluster)
clusterMovies3 <- kmeans(fifa_scale,centers=20)
table(clusterMovies3$cluster)
set.seed(123)
clusterMovies3 <- kmeans(fifa_scale,centers=20)
table(clusterMovies3$cluster)
set.seed(123)
clusterMovies2 <- kmeans(fifa_scale,centers=5)
table(clusterMovies2$cluster)
set.seed(123)
clusterMovies2 <- kmeans(fifa_scale,centers=5,nstart=5)
table(clusterMovies2$cluster)
set.seed(123)
clusterMovies3 <- kmeans(fifa_scale,centers=20, nstart=20)
table(clusterMovies3$cluster)
print(i)
for (i in [1:20]){
for (i in 1:15){
print(i)
}
sst <- c()
for (i in 1:15){
clusters <- kmeans(fifa_scale,centers=i,nstart=20)
sst <- c(sst, clusterMovies4$tot.withinss)
}
sst <- c()
for (i in 1:15){
clusters <- kmeans(fifa_scale,centers=i,nstart=20)
sst <- c(sst, clusters$tot.withinss)
}
plot(1:15,sst)
df2 <- read.csv("dendrohydrology.csv")
dim(df2)
test <- df2[81:91,]
train <- df2[1:80,]
corr(train)
cor(train)
cor(train)[,Q]
cor(train)[,"Q"]
max(cor(train)[,"Q"])
which.max(cor(train)[,"Q"])
(cor(train)[,"Q"])
sort((cor(train)[,"Q"]))
library(rpart)
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
summary(cart1)
print(cart1)
summary(cart1)
print(cart1)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
summary(cart1)
mse(cart1)
predictcart1 <- predict(cart1,newdata=test,type="class")
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
predictcart1 <- predict(cart1,newdata=test,type="anova")
printcp(cart1)
df2 <- read.csv("dendrohydrology.csv")
dim(df2)
train <- df2[1:80,]
test <- df2[81:91,]
sort((cor(train)[,"Q"]))
test <- subset(test, select=-c(Q))
predictcart1 <- predict(cart1,newdata=test,type="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
test <- subset(test, select=-c(Q))
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
test <- subset(test, select=-c("Q"))
predictcart1 <- predict(cart1,newdata=test,type="class")
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
printcp(cart1)
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
#predictcart1 <- predict(cart1,newdata=test,type="class")
printcp(cart1)
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
#predictcart1 <- predict(cart1,newdata=test,type="class")
printcp(cart1)
df2 <- read.csv("dendrohydrology.csv")
dim(df2)
train <- df2[1:80,]
test <- df2[81:91,]
sort((cor(train)[,"Q"]))
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
#predictcart1 <- predict(cart1,newdata=test,type="class")
printcp(cart1)
cart2 <- prune(cart1,0.088571)
prp(cart2,type=4,extra=4)
library(caTools) #Split train test data
library(ROCR) #ROC Curve
library(rpart) #CART
library(rattle) #CART Visualisation
library(RColorBrewer) #CART Visualisation
library(rpart.plot)  #CART Visualisation
library(ipred) #Bagging for decision trees only
library(randomForest)
library(tm) #Create DTM
library(SnowballC) #Stemming words
library(wordcloud)
library(e1071) #Naive Bayes Classifier
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/FInal Exam II")
cart2 <- prune(cart1,0.088571)
prp(cart2,type=4,extra=4)
prp(cart2)
predictcart1 <- predict(cart1,newdata=test,type="class")
library(rpart)
set.seed(100)
cart1 <- rpart(as.factor(Q)~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="class")
printcp(cart1)
head(df2)
printcp(cart1)
plot(cart1)
prp(cart1)
printcp(cart1)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
#predictcart1 <- predict(cart1,newdata=test,type="class")
prp(cart1)
printcp(cart1)
cart2 <- prune(cart1,0.085482)
prp(cart2)
predictcart1 <- predict(cart1,newdata=test,type="class")
predictcart1 <- predict(cart1,newdata=test,type="regression")
predictcart1 <- predict(cart1,newdata=test,type="prob")
predictcart1 <- predict(cart1,newdata=test,type="")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
predictcart1
predictcart1 <- predict(cart1,newdata=test,type="vector ")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
MSE(test$Q, predictcart1)
MSE(test$Q, predictcart1)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
MSE(test$Q, predictcart1)
(predictcart1-test$Q)^2
sum((predictcart1-test$Q)^2)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
sum((predictcart1-test$Q)^2)
MSE(test$Q, predictcart1)
cart2 <- prune(cart1,0.085482)
predictcart2 <- predict(cart2,newdata=test,type="matrix")
sum((predictcart2-test$Q)^2)
prp(cart2)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
set.seed(123)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
set.seed(123)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
set.seed(123)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
predict_bag_model <- predict(mt,newdata=test,type="class")
set.seed(123)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
predict_bag_model <- predict(mt,newdata=test,type="class")
MSE(test$Q, predict_bag_model)
mean((test$Q - predict_bag_model)^2)
set.seed(123)
mt <- bagging (Q~.,data=train, coob=TRUE)
print(mt)
predict_bag_model <- predict(mt,newdata=test,type="class")
mean((test$Q - predict_bag_model)^2)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
mean((predictcart1-test$Q)^2)
#MSE(test$Q, predictcart1)
#prp(cart1)
printcp(cart1)
cart2 <- prune(cart1,0.085482)
predictcart2 <- predict(cart2,newdata=test,type="matrix")
mean((predictcart2-test$Q)^2)
prp(cart2)
plot(test$Q, predict_bag_model)
plot(predict_bag_model)
plot(predictcart2)
head(df2)
dim(df2)
df2$Q
meanQ <- mean(df2$Q)
df2$category <- ifelse(df$Q > meanQ, "WET", "DRY")
df2$category <- ifelse(df$Q > meanQ, "WET", "DRY")
df2$category <- ifelse(df$Q>meanQ, "WET", "DRY")
df2$category <- 0
head(df2)
meanQ <- mean(df2$Q)
df2$category <- 0
df2$category <- ifelse(df$Q>meanQ, "WET", "DRY")
df2$category <- ifelse(df$Q>meanQ, 1, 0)
df2$category <- ifelse(df$Q>meanQ, 1, 0)
meanQ
df2$category <- ifelse(df2$Q>meanQ, 1, 0)
df2$category <- ifelse(df2$Q>meanQ, "WET", "DRY")
table(df2$category)
df2 <- subset(df2, select=-c("Q"))
df2 <- df2[,-Q]
df2 <- df2[,-"Q"]
df2 <- subset(df2, select=-c(Q))
test1 <-df2[81:90,]
dim(train1)
train1 <- df2[1:80,]
test1 <-df2[81:90,]
dim(train1)
dim(test1)
test1 <-df2[80:90,]
test1 <-df2[80:90,]
dim(test1)
test1 <-df2[81:91,]
dim(train1)
dim(test1)
table(train1$category)
table(test1$category)
set.seed(123)
forest_model <- randomForest(as.factor(category)~., data=train1)
print(forest_model)
sum(diag(table(test1$category,predictforest)))/sum(table(test1$category,predictforest))
set.seed(123)
forest_model <- randomForest(as.factor(category)~., data=train1)
print(forest_model)
predictforest <- predict(forest_model,newdata=test1,type="class")
sum(diag(table(test1$category,predictforest)))/sum(table(test1$category,predictforest))
print(predictforest)
print(forest_model)
summary(forest_model)
varImpPlot(forest_model)
order2 <- sort(varUsed(forest_model), decreasing=TRUE, index.return=TRUE) #After running predict(), we can see what was actually the most useful variables
names(test1[,head(order2$ix)]) #Print out the names of the variables that are the most useful
model3 <- naiveBayes(as.factor(category)~.,data=train1)
model3 <- naiveBayes(as.factor(category)~.,data=train1)
sum(diag(table(test1$category,model3)))/sum(table(test1$category,model3))
set.seed(123)
model3 <- naiveBayes(as.factor(category)~.,data=train1)
predict3 <- predict(model3,newdata=test1,type="class")
sum(diag(table(test1$category,predict3)))/sum(table(test1$category,predict3))
model3
model3[,PC5]
model3[,"PC5"]
model3[,"5]
model3[,5]
model3
model3
model3
set.seed(123)
model3 <- naiveBayes(as.factor(category)~.,data=train1)
predict3 <- predict(model3,newdata=test1,type="class")
sum(diag(table(test1$category,predict3)))/sum(table(test1$category,predict3))
model3
cor(df2)
df2 <- read.csv("dendrohydrology.csv")
head(df2)
dim(df2)
train <- df2[1:80,]
test <- df2[81:91,]
sort((cor(train)[,"Q"]))
cor(df2)
fifa <- read.csv("fifa.csv")
View(fifa)
fifa <- read.csv("fifa.csv")
players1 <- fifa$Marking > 85 & fifa$StandingTackle > 85 & fifa$SlidingTackle > 85
nrow(players1)
count(players1)
players1
fifa[players1]
fifa[players1 == TRUE]
table(fifa$Club)
players1 <- subset(fifa, Marking>85 & StandingTackle>85 & SlidingTackle>85)
players1
nrow(players1)
players1$Positino
players1$Position
table(players1$Position)
fifa_drop <- subset(fifa, select=-c(ID, Name, Club, Position))
fifa_scale <- scale(fifa_drop)
max(fifa_scale[,35])
min(fifa_scale[,35])
distances <- dist(fifa_scale[,], method="euclidean")
nrow(distances)
count(distances)
distances <- dist(fifa_scale[,], method="euclidean")
count(distances)
distances
distances <- dist(fifa_scale, method="euclidean")
nrow(fifa_scale)
distances <- dist(fifa_scale[,], method="euclidean")
clusterMovies1 <- hclust(distances, method="ward.D2")
#plot(clusterMovies1)
clusterGroups1 <- cutree(clusterMovies1, k=5)
table(clusterGroups1$marketing)
nrow(fifa_scale)
distances <- dist(fifa_scale[,], method="euclidean")
clusterMovies1 <- hclust(distances, method="ward.D2")
#plot(clusterMovies1)
clusterGroups1 <- cutree(clusterMovies1, k=5)
#table(clusterGroups1$marketing)
Cat1 <- matrix(0,nrow=36,ncol=10) # a matrix "Cat1" where rows denote categories and columns indicate clusters
for(i in 1:36){
Cat1[i,] <- tapply(fifa_scale[,i], clusterGroups1, mean)
}
rownames(Cat1) <- colnames(fifa_scale)[1:36]
which.max(Cat1["Marking",])
mean(Cat1["Marking",])
mean(Cat1["StandingTackle",])
mean(Cat1["SlidingTackle",])
# clusterMovies2 <- hclust(distances, method="complete")
# plot(clusterMovies2)
# clusterGroups2 <- cutree(clusterMovies2, k=20)
# table(clusterGroups2)
Cat1
Cat1$cluster
Cat1$clusters
Cat1$centres
Cat1$centre
clusterGroups1
clusterGroups1 == 3
df_3 <- subset(fifa_scale, clusterGroups1 == 3)
df_3 <- subset(fifa_scale, clusterGroups1 == 3)
df_3
df_3$Position
Columns(df_3)
table(df_3$Positioning)
View(df_3)
df_3$Positionning
df_3$Positioning
df_3[, "Positioning"]
df_3 <- subset(fifa, clusterGroups1 == 3)
table(df_3$Positioning)
which.max(table(df_3$Positioning))
View(fifa)
which.max(table(df_3$Position))
df_3 <- subset(fifa, clusterGroups1 == 3)
df_3[, "Position"]
which.max(table(df_3$Position))
(table(df_3$Position))
(table(df_3$RoomToGrow))
(mean(df_3$RoomToGrow))
```{r}
clusterMovies1 <- hclust(distances, method="ward.D2")
library(caTools) #Split train test data
library(ROCR) #ROC Curve
library(rpart) #CART
library(rattle) #CART Visualisation
library(RColorBrewer) #CART Visualisation
library(rpart.plot)  #CART Visualisation
library(ipred) #Bagging for decision trees only
library(randomForest)
library(tm) #Create DTM
library(SnowballC) #Stemming words
library(wordcloud)
library(e1071) #Naive Bayes Classifier
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/FInal Exam II")
fifa <- read.csv("fifa.csv")
View(fifa)
players1 <- subset(fifa, Marking>85 & StandingTackle>85 & SlidingTackle>85)
nrow(players1)
table(players1$Position)
#players1 <- fifa$Marking > 85 & fifa$StandingTackle > 85 & fifa$SlidingTackle > 85
fifa_drop <- subset(fifa, select=-c(ID, Name, Club, Position))
fifa_scale <- scale(fifa_drop)
max(fifa_scale[,35])
min(fifa_scale[,35])
distances <- dist(fifa_scale, method="euclidean")
count(distances)
distances <- dist(fifa_scale, method="euclidean")
clusterMovies1 <- hclust(distances, method="ward.D2")
plot(clusterMovies1)
clusterGroups1 <- cutree(clusterMovies1, h=20)
length(clusterGroups1)
length(unique(cutree(clusterGroups1, h = 20)))
length(unique(cutree(clusterGroups1, h = 20)))
length(clusterGroups1)
clusterMovies1 <- hclust(distances, method="complete")
plot(clusterMovies1)
clusterGroups1 <- cutree(clusterMovies1, h=20)
length(clusterGroups1)
#length(unique(cutree(clusterGroups1, h = 20)))
clusterMovies1 <- hclust(distances, method="ward.D2")
plot(clusterMovies1)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
mean((predictcart1-test$Q)^2)
#MSE(test$Q, predictcart1)
#prp(cart1)
printcp(cart1)
library(rpart)
set.seed(100)
cart1 <- rpart(Q~.,data=train,method="anova")
predictcart1 <- predict(cart1,newdata=test,type="matrix")
mean((predictcart1-test$Q)^2)
#MSE(test$Q, predictcart1)
prp(cart1)
printcp(cart1)
