table(oscars$PGA[oscars$PP==1 & oscars$Ch==1])
table(oscars$Gd[oscars$DD==1 & oscars$Ch==1])
table(oscars$Gm1[oscars$MM==1 & oscars$Ch==1]+oscars$Gm2[oscars$MM==1 & oscars$Ch==1])
table(oscars$SAM[oscars$MM==1 & oscars$Ch==1])
table(oscars$Gf1[oscars$FF==1 & oscars$Ch==1] + oscars$Gf2[oscars$FF==1 & oscars$Ch==1])
table(oscars$SAF[oscars$FF==1 & oscars$Ch==1])
table(oscars$PrNl[oscars$MM==1], oscars$Ch[oscars$MM==1])
table(oscars$PrWl[oscars$MM==1], oscars$Ch[oscars$MM==1])
table(oscars$PrWl[oscars$FF==1], oscars$Ch[oscars$FF==1])
#options(repos="https://cran.rstudio.com" )
#install.packages("mlogit")
library(mlogit)
oscarsPP <- subset(oscars, PP==1)
oscarsDD <- subset(oscars, DD==1)
oscarsMM <- subset(oscars, MM==1)
oscarsFF <- subset(oscars, FF==1)
str(oscarsPP)
oscarsPP$GG <- oscarsPP$Gmc + oscarsPP$Gdr
D1 <- mlogit.data(subset(oscarsPP, Year <=2006), choice="Ch", shape="long", alt.var = "Mode")
MPP1 <- mlogit(Ch~Nom+Dir+GG+Aml+Afl+PGA+Days+Length-1, data=D1)
summary(MPP1)
MPP2 <- mlogit(Ch~Nom+Dir+GG+PGA-1, data=D1)
summary(MPP2)
LL0 <- 56*log(1/5)
LLbeta = as.numeric(MPP2$logLik)
LLR = 1-LLbeta/LL0
LLR
p=4
AIC = -2*LLbeta+2*p
AIC
D1_new <- mlogit.data(subset(oscarsPP, Year==2007), choice="Ch", shape="long", alt.var="Mode")
Predict2 <- predict(MPP2, newdata= D1_new)
Predict2
oscarsPP[oscarsPP$Year==2007 & oscarsPP$Mode==which.max(Predict2),]
subset(oscarsPP, Year==2007)
D <- mlogit.data(oscarsPP, choice = "Ch", shape="long", alt.var="Mode")
M <- mlogit(Ch~Nom+Dir+GG+PGA-1, data=D)
P <- predict(M, newdata=D)
Pred <- as.vector(t(P))
oscarsPP$Pred <- Pred
oscarsPP$Pred[oscarsPP$Ch==1]
subset(oscarsPP, oscarsPP$Year == 2004)
PPwin=apply(P,1,which.max)
PPyw=cbind(2007:1951,PPwin)
lists=character(0)
for (i in 1:57)
lists=rbind(lists,c(PPyw[i,1],as.character(oscarsPP[oscarsPP$Year==PPyw[i,1] & oscarsPP$Mode==PPyw[i,2],c("Name")]),round(P[i,PPyw[i,2]],digits=2),as.character(oscarsPP[oscarsPP$Year==PPyw[i,1] & oscarsPP$Ch==1,c("Name")])))
colnames(lists)=c("Year","Predicted","Probability","Winner")
noquote(lists)
Fail <- 0
Predict <- NULL
coefficients <- NULL  # reserved keyword for null object in R (undefined)
for(i in 1960:2006){
D <- mlogit.data(subset(oscarsMM, Year<=i), Choice="Ch", shape="long", "alt.var"="Mode")
M <- mlogit(Ch~Pic+Gm1+Gm2+PrNl+PrWl-1, data=D)
coefficients <- rbind(coefficients, M$coefficients)
D1 <- mlogit.data(subset(oscarsMM, Year == (i+1)), choice="Ch", shape="long", alt.var="Mode")
P1 <- predict(M, newdata=D1)
Predict <- rbind(Predict, P1)
Fail <- Fail + as.logical(which.max(P1) - which.max(subset(oscarsMM, Year== (i+1) )$Ch))
}
Predict
Fail
head(D1)
head(D1)
D1
D1 <- mlogit.data(subset(oscarsPP, Year <=2006), choice="Ch", shape="long", alt.var = "Mode")
D1
MPP1 <- mlogit(Ch~Nom+Dir+GG+Aml+Afl+PGA+Days+Length-1, data=D1)
summary(MPP1)
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 5/Lecture 10 - Model Selection(Cross Validation and LASSO)")
rm(list=ls())
hitter <- read.csv("Hitters(10).csv")
str(hitter)
hitter<-na.omit(hitter)
str(hitter)
hitters <- hitter[,2:21]
model1 <- regsubsets(Salary~.,hitters)
#install.packages("leaps")
library(leaps),
hitters <- hitter[,2:21]
model1 <- regsubsets(Salary~.,hitters)
#install.packages("leaps")
library(leaps)
?regsubsets
hitters <- hitter[,2:21]
model1 <- regsubsets(Salary~.,hitters)
summary(model1)
model2<-regsubsets(Salary~.,hitters,nvmax=19)
summary(model2)
model1 <- regsubsets(Salary~.,hitters)
summary(model1)
names(summary(model2))
summary(model2)
summary(model2)$rsq
plot(summary(model2)$rsq)
plot(summary(model2)$rss)
plot(summary(model2)$adjr2)
which.max(summary(model2)$adjr2)
coef(model2,11)
model3<-regsubsets(Salary~.,data=hitters,nvmax=19,method="forward")
which.max(summary(model3)$adjr2)
coef(model3,11)
summary(model2)$adjr2-summary(model3)$adjr2
plot(summary(model3)$adjr2)
model4<-regsubsets(Salary~.,data=hitters,nvmax=19,method="backward")
which.max(summary(model4)$adjr2)
coef(model4,11)
summary(model4)
valset =(!train)
train=sample(c(TRUE ,FALSE), nrow(hitters),rep=TRUE)
set.seed(1)
train=sample(c(TRUE ,FALSE), nrow(hitters),rep=TRUE)
valset =(!train)
x <- c(4,2,6)
y <- c(1,0,-1)
length(x)
sum(x)
count(x)
sum(x)
sum(x^2)
x+y
x*y
x-2
x^2
x*y[1:2]
7:11
seq(2,9)
c(seq(2,9))
c(seq(2,9))
x <- c(4,2,6)
x
seq(2,9)
seq(4,10,by=2)
seq(3,30,length=10)
rep(2,4)
rep(c(1,5),4)
rep(c(1,2),c(4,4))
x <- c(5,9,2,3,4,6,7,0,8,12,2,9)
x[2]
x[2:4]
x[c(2,3,6)]
x[-(10:12)]
x<-matrix(c(3,-1,2,-1),nrow=2, ncol=2)
y<-matrix(c(1,0,4,1,0,-1),nrow=2, ncol=3)
5. Create in R the matrices
\begin{align*}
\texttt{ x} &=
\left[ {\begin{array}{cc}
3 & 2 \\       -1 & -1 \\      \end{array} } \right], \text{ and, }\quad
\texttt{y}=
\left[ {\begin{array}{ccc}
1 & 4 & 0 \\    0 &   1 & -1 \      \end{array} } \right].
\end{align*}
Calculate the following and check your answers in R:
```{r}
x<-matrix(c(3,-1,2,-1),nrow=2, ncol=2)
y<-matrix(c(1,0,4,1,0,-1),nrow=2, ncol=3)
2*x
x*x
x%*%x
x%*%y
t(y)
solve(x)
```
With $x$ and $y$ as above, calculate the effect of the following subscript operations and check
your answers in R.
```{r}
x[1,]
x[2,]
x[,2]
y[1,2]
y[,2:3]
```
6. Internet privacy has gained widespread attention in recent years. To measure the degree to which people are concerned about hot-button issues like Internet privacy, social scientists conduct polls in which they interview a large number of people about the topic. In this question, we will analyze data from a July 2013 Pew Internet and American Life Project poll on Internet anonymity and privacy, which involved interviews across the United States. The dataset \texttt{AnonymityPoll.csv} has the following fields (all Internet use-related fields were only collected from interviewees who either use the Internet or have a smartphone):
x<-matrix(c(3,-1,2,-1),nrow=2, ncol=2)
x
2*x
x
2*x
x*x
x%*%x
x*x
x%*%x
t(y)
solve(x)
x
solve(x)
?solve()
solve(x)
x[1,]
x[2,]
x[1,]
x
]
x[,2]
y[,2:3]
y
y[,2:3]
poll <- read.csv("AnonymityPoll.csv")
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Exercise/Week 1")
poll <- read.csv("AnonymityPoll(2).csv")
summary(poll)
str(poll)
table(poll$Smartphone)
summary(poll$Smartphone)
table(poll$Smartphone)
table(poll$Smartphone == 0)
table(poll$Smartphone)
nrow(poll$Smartphone)
nrow(poll$Smartphone)
nrow(poll$Smartphone == 0)
nrow(poll$Smartphone == 0)
nrow(poll$Smartphone[poll$Smartphone == 0])
table(poll$Smartphone)
length(poll$Smartphone[poll$Smartphone == 0])
table(poll$Smartphone)
length(poll[poll$Smartphone == 0])
nrow(poll[poll$Smartphone == 0])
nrow(poll[poll$Smartphone == 0,])
table(poll$Smartphone)
table(poll$Smartphone)
summary(poll$Smartphone)
sum(is.na(poll$Smartphone))
nrow(poll$Smartphone)
nrow(poll$Smartphone == 0)
nrow(filter(poll, Smartphone == 0))
nrow(filter(poll, Smartphone == 0)),
nrow(filter(poll, Smartphone == 0))
poll <- read.csv("AnonymityPoll(2).csv")
summary(poll)
str(poll)
nrow(filter(poll, "Smartphone" == 0))
summary(poll$Smartphone)
table(poll$Smartphone)
nrow(filter(poll, "Smartphone" == 0))
nrow(subset(poll, Smartphone==0))
table(poll$Smartphone)
nrow(subset(poll, Smartphone==0))
nrow(subset(poll, Smartphone==1))
nrow(subset(poll, Smartphone==1))
sum(is.na(poll$Smartphone))
nrow(subset(poll, Smartphone==0))
nrow(subset(poll, Smartphone==1))
nrow(subset(poll, Smartphone==0))
table(poll$Internet.Use, poll$Smartphone)
nrow(subset(poll, Smartphone==0 && Internet.Use==0))
nrow(subset(poll, Smartphone==0 and Internet.Use==0))
nrow(subset(poll, Smartphone==0 & Internet.Use==0))
nrow(subset(poll, Smartphone==1 & Internet.Use==1))
nrow(subset(poll, Smartphone==0 & Internet.Use==1))
nrow(subset(poll, Smartphone==1 & Internet.Use==0))
# alternatively use
sum(is.na(poll$Internet.Use))
sum(is.na(poll$Smartphone))
limited <- subset(poll, poll$Internet.Use == 1|poll$Smartphone == 1)
str(limited)
# alternatively use
nrow(limited)
sum(limited$Info.On.Internet==0)
sum(limited$Info.On.Internet==11)
#or you can also do
table(limited$Info.On.Internet)
hist(limited$Age)
max(table(limited$Info.On.Internet, limited$Age))
table(limited$Info.On.Internet, limited$Age)
max(
max(table(limited$Info.On.Internet, limited$Age))
max(table(limited$Info.On.Internet, limited$Age))
max(table(limited$Info.On.Internet, limited$Age))
max(limited$Info.On.Internet == limited$Age)
limited$Info.On.Internet == limited$Age
max(limited$Info.On.Internet == limited$Age)
sum(limited$Info.On.Internet == limited$Age)
sum(limited$Info.On.Internet == limited$Age)
(table(limited$Info.On.Internet, limited$Age))
max(table(limited$Info.On.Internet, limited$Age))
Info.On.Internet
jitter(c(1,2,3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet, limited$Smartphone, mean)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, table)
?tapply(vector, index, function)
?tapply()
```{r}
tapply(limited$Info.On.Internet, limited$Smartphone, std)
tapply(limited$Info.On.Internet, limited$Smartphone, mean)
tapply(limited$Info.On.Internet, limited$Smartphone, NULL)
tapply(limited$Info.On.Internet, limited$Smartphone, mean)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, table)
#or you can also do
tapply(limited$Tried.Masking.Identity, limited$Smartphone, mean, na.rm = TRUE)
data(swiss)
head(swiss)
?stars
?swiss
stars(swiss, key.loc = c(18,2))
head(swiss)
?stars
head(swiss)
stars(swiss, key.loc = c(18,2))
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
head(swiss)
stars(swiss)
stars(swiss, key.loc = c(18,2))
head(swiss)
data(swiss)
head(swiss)
table(swiss)
```{r}
data(swiss)
view(swiss)
swiss
swiss[,18]
swiss[18,2]
data(swiss)
head(swiss)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility")
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(80,35))
stars(swiss, key.loc = c(18,2))
head(swiss)
swiss[,c(2,3,5,6)]
as.matrix(swiss[,c(4,1)])
```{r}
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
stars[,c(18,2)]
stars(swiss, key.loc = c(18,2))
head(swiss)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T)
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE)
, key.loc = c(80,35)
(c) Set the argument draw.segments to TRUE to get segments instead of stars. Place a legend
with key.loc.
```{r}
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(80,35))
```
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(80,35))
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(80,35))
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(40,35))
stars(as.matrix(swiss[,c(2,3,5,6)]), location = as.matrix(swiss[,c(4,1)]), axes = T, labels = NULL, len = 3, main = "Fertility against Education", xlab = "Education", ylab = "Fertility", draw.segments = TRUE, key.loc = c(80,35))
Parole <- read.csv("Parole(3).csv")
str(Parole)
table(Parole$Violator,Parole$Male)
table(Parole$State,Parole$Crime)
ggplot(data = Parole, aes(x = Age)) + geom_histogram()
library(ggplot2)
ggplot(data = Parole, aes(x = Age)) + geom_histogram()
ggplot(data = Parole, aes(x = Age)) + geom_histogram(binwidth=5,closed=c("left"),center=17.5)
ggplot(data = Parole, aes(x = Age)) + geom_histogram(binwidth=5,closed=c("left"),center=17.5,color=c("blue"))
ggplot(data = Parole, aes(x = Age)) + geom_histogram(binwidth=5,closed=c("left"),center=17.5,color=c("blue"))+facet_grid(Male~.)
ggplot(data = Parole, aes(x = Age)) + geom_histogram(binwidth=5,closed=c("left"),center=17.5,color=c("blue"))+facet_grid(.~Male)
ggplot(data = Parole, aes(x = Age,fill = as.factor(Male))) + geom_histogram(binwidth=5,closed=c("left"),center=17.5,color=c("blue"))
ggplot(data = Parole, aes(x = Age,fill = as.factor(Male))) + geom_histogram(binwidth=5,closed=c("left"),center=17.5,color=c("blue"),position="identity",alpha=0.5)
ggplot(data = Parole, aes(x = TimeServed)) + geom_histogram(binwidth=1,center=0.5,closed="right")
ggplot(data = Parole, aes(x = TimeServed)) + geom_histogram(binwidth=1,center=0.5,closed="right")+facet_grid(Crime~.)
ggplot(data = Parole, aes(x = TimeServed,fill=Crime)) + geom_histogram(binwidth=1,center=0.5,closed="right",position="identity",alpha=0.5)
nrow(iris)
ncol(iris)
ncol(iris)
dim(iris)
colnames(iris)
head(iris)
```{r}
pairs.panels(iris.data, ellipses = F, lm =T, breaks=10, hist.col="blue")
library(psych)
pairs.panels(iris.data, ellipses = F, lm =T, breaks=10, hist.col="blue")
iris.data<-iris[,-5]
iris.sp<-iris[,5]
library(psych)
pairs.panels(iris.data, ellipses = F, lm =T, breaks=10, hist.col="blue")
pr.out<-prcomp(iris.data,scale=F)
summary(pr.out)
pr.out$sdev
pve<-pr.out$sdev^2/sum(pr.out$sdev^2)
cpve<-cumsum(pve)
pve
cpve
plot(cpve,xlab="Principal components",type="l",ylim=c(0.7,1))
library(factoextra)
R.version.string
iris.data<-iris[,-5]
iris.sp<-iris[,5]
library(psych)
pairs.panels(iris.data, ellipses = F, lm =T, breaks=10, hist.col="blue")
pr.out<-prcomp(iris.data,scale=F)
summary(pr.out)
pr.out$sdev
pve<-pr.out$sdev^2/sum(pr.out$sdev^2)
cpve<-cumsum(pve)
pve
cpve
library(factoextra)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp)
fviz_eig(pr.out)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp)
#fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp,addEllipses=TRUE, ellipse.level=0.95)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp,addEllipses=TRUE, ellipse.level=0.95)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp,addEllipses=TRUE, ellipse.level=0.95)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp)
fviz_pca_biplot(pr.out, label = "var", habillage=iris.sp,addEllipses=TRUE, ellipse.level=0.95)
pr.out.sc<-prcomp(iris.data,scale=T)
summary(pr.out.sc)
pr.out.sc$sdev
sum((pr.out.sc$sdev)^2)
plot(pr.out.sc$sdev^2)+abline(h=1,col="red")
pve.sc<-pr.out.sc$sdev^2/sum(pr.out.sc$sdev^2)
cpve.sc<-cumsum(pve.sc)
pve.sc
cpve.sc
plot(cpve.sc,xlab="Principal components",type="l",ylim=c(0.4,1))
library(factoextra)
fviz_pca_biplot(pr.out.sc, label = "var", habillage=iris.sp)
fviz_pca_biplot(pr.out.sc, label = "var", habillage=iris.sp,addEllipses=TRUE, ellipse.level=0.95)
summary(pr.out.sc)
str(wineitaly)
wineitaly<-read.csv("wine_italy.csv",sep=",",head=T)
str(wineitaly)
wine.it<-wineitaly[,-1]
wine.it
wine.cl
wine.cl<-wineitaly[,1]
wine.cl
pairs.panels(wine.it, ellipses = F, lm =T, breaks=10, hist.col="blue")
pr.wine<-prcomp(wine.it,scale=T)
summary(pr.wine)
pr.wine$sdev
#library(factoextra)
fviz_pca_biplot(pr.wine, label = "var", habillage=wine.cl)
fviz_pca_biplot(pr.wine, label = "var", habillage=wine.cl,addEllipses=TRUE, ellipse.level=0.95)
summary(pr.wine)
#library(factoextra)
fviz_pca_biplot(pr.wine, label = "var", habillage=wine.cl)
fviz_pca_biplot(pr.wine, label = "var", habillage=wine.cl,addEllipses=TRUE, ellipse.level=0.95)
str(wineitaly)
str(pr.wine)
head(pr.wine)
pr.wine$rotation[order(pr.wine$rotation[,1],decreasing=T),1:2] ## order according to PC1
pr.wine$rotation[order(pr.wine$rotation[,2],decreasing=T),1:2] ## order according to PC2
pr.wine$rotation[order(pr.wine$rotation[,1],decreasing=T),1:2] ## order according to PC1
pr.wine$rotation[order(pr.wine$rotation[,2],decreasing=T),1:2] ## order according to PC2
pve.w<- pr.wine$sdev^2/sum(pr.wine$sdev^2)
cpve.w<- cumsum(pve.w)
pve.w
cpve.w
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(pr.wine,type="l",ylim=c(0,5),main="Scree plot")+abline(h=1,col="red")
pve.w<- pr.wine$sdev^2/sum(pr.wine$sdev^2)
pve.w
cpve.w<- cumsum(pve.w)
cpve.w
pve.w
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(pr.wine,type="l",ylim=c(0,5),main="Scree plot")+abline(h=1,col="red")
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(pr.wine,type="l",ylim=c(0,5),main="Scree plot")+abline(h=1,col="red")
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
pr.out.sc
pr.out
head(pr.out)
summary(pr.out)
head(pr.out)
pr.out
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(pr.wine,type="l",ylim=c(0,5),main="Scree plot")+abline(h=1,col="red")
n
plot(cpve.w,xlab="Principal components",type="l",ylim=c(0,1))+abline(h=0.8,col="red")+abline(v=5,col="blue")
plot(pr.wine,type="l",ylim=c(0,5),main="Scree plot")+abline(h=1,col="red")
setwd("~/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8/Lecture 12 - CART and Supreme Court")
rm(list=ls())   # Clear the environment
setwd("/Users/james/OneDrive - Singapore University of Technology and Design/SUTD/Year 3/Term 6/40.016 - The Analytics Edge/Week 8/Lecture 12 - CART and Supreme Court")  # Setup the working directory
supreme <- read.csv("supreme(7).csv") # We have 623 observations and 20 variables
str(supreme)       # Internal structure of the dataframe
stevens <- subset(supreme[,c("docket","term","stevdir","petit","respon","circuit","unconst","lctdir","issue","result")],supreme$stevdir!=9)
#Creating a new variable that will output a value 1 if it satistfy condition 1 or condition 2
stevens$rev <- as.integer((stevens$lctdir=="conser" & stevens$stevdir==0) | (stevens$lctdir=="liberal" & stevens$stevdir==1))
#Creating a new variable that will output a value 1 if it satistfy condition 1 or condition 2
stevens$rev <- as.integer((stevens$lctdir=="conser" & stevens$stevdir==0) | (stevens$lctdir=="liberal" & stevens$stevdir==1))
table(stevens$rev)
install.packages("caTools")
install.packages("caTools")
library(caTools)
set.seed(123)                                   # set seed for random sampling
spl <- sample.split(stevens$rev,SplitRatio=0.7) # We use 70% of the data for training
train <- subset(stevens,spl==TRUE);             # training dataset
test <- subset(stevens,spl==FALSE);             # testing dataset
m1 <- glm(rev~petit+respon+circuit+unconst+issue+lctdir,data=train,family="binomial")
summary(m1)
test <- subset(test,test$issue!="IR")
p1 <- predict(m1,newdata=test,type="response")
table(p1>=0.5,test$rev)
library(ROCR)
if(!require(ROCR)){
install.packages("ROCR")
library(ROCR)
}
pred <- prediction(p1,test$rev)
perf <- performance(pred, x.measure="fpr", measure="tpr")
performance(pred,measure="auc")
plot(perf)
pred
perf
p1
p1 <- predict(m1,newdata=test,type="response")
plot(perf)
install.packages("rpart")
install.packages("rpart")
library(rpart)
